#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <LiquidCrystal_I2C.h>  // Include the LCD library

// Wi-Fi Setup
const char* ssid = "Kamil's House";
const char* password = "Kamil987@";

ESP8266WebServer server(80);

// LCD Setup (adjust the I2C address and dimensions as necessary)
LiquidCrystal_I2C lcd(0x27, 16, 2); // I2C address, width, and height

// Game Variables
bool gameActive = false;
int score = 0;

void setup() {
    Serial.begin(115200);  // Start serial communication

    // Initialize LCD
    lcd.begin();  // Set up the LCD's number of columns and rows
    lcd.backlight();    // Turn on the backlight

    WiFi.begin(ssid, password);
    Serial.print("Connecting to Wi-Fi");
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }

    Serial.println("\nWi-Fi connected!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());

    // Display "Start" message on LCD
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Mario's Epic Adventure");
    lcd.setCursor(0, 1);
    lcd.print("Press Start to play");

    // Web server routes
    server.on("/", HTTP_GET, []() {
        server.send(200, "text/html", R"rawliteral(
        <!DOCTYPE html>
        <html>
        <head>
            <title>Mario's Epic Adventure</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
            <style>
    body { font-family: Arial, sans-serif; text-align: center; background-color: #f4f4f4; }
    h1 { color: #ff0000; text-shadow: 3px 3px #ffd700, -3px -3px #0000ff; font-size: 36px; font-weight: bold; }
    canvas {
        border: 1px solid #333;
        width: 100%;
        max-width: 360px; /* Limit max width for larger screens */
        height: auto; /* Maintain aspect ratio */
    }
    .btn { padding: 10px 20px; font-size: 16px; cursor: pointer; }
    #gameStatus { margin-top: 15px; font-weight: bold; color: #d32f2f; }
</style>

        </head>
        <body>
            <h2>Mario's Epic Adventure</h2>
            <canvas id="gameCanvas" width="360" height="540"></canvas>
            <br>
            <button class="btn" id="startButton" onclick="startGame()">Start Game</button>
            <button class="btn" id="jumpButton" onclick="jump()" disabled>Jump</button>
            <button class="btn" id="stopButton" onclick="stopGame()" disabled>Stop Game</button>
            <div id="gameStatus">
                <p>Score: <span id="score">0</span></p>
                <p id="gameState">Game Over</p>
            </div>

            <script>
                let canvas = document.getElementById('gameCanvas');
                let ctx = canvas.getContext('2d');
                let mario = { x: 50, y: 150, width: 30, height: 30, color: 'blue', jumping: false };
                let obstacle = { x: 480, y: 150, width: 30, height: 30, color: 'green' };
                let score = 0;
                let gameInterval;
                let gameActive = false;

                function startGame() {
                    gameActive = true;
                    score = 0;
                    mario.y = 150;
                    obstacle.x = 480;
                    document.getElementById('score').textContent = score;
                    document.getElementById('gameState').textContent = 'Game On';
                    document.getElementById('startButton').disabled = true;
                    document.getElementById('jumpButton').disabled = false;
                    document.getElementById('stopButton').disabled = false;
                    clearInterval(gameInterval);
                    gameInterval = setInterval(gameLoop, 1000 / 60);
                }

                function stopGame() {
                    gameActive = false;
                    clearInterval(gameInterval);
                    document.getElementById('startButton').disabled = false;
                    document.getElementById('jumpButton').disabled = true;
                    document.getElementById('stopButton').disabled = true;
                    document.getElementById('gameState').textContent = 'Game Over';
                }

                function jump() {
    if (mario.jumping) return; // Prevents initiating another jump when already jumping

    mario.jumping = true;
    let peakHeight = 50; // the peak height of the jump
    let jumpSpeed = 5; // how quickly Mario moves up
    let initialY = mario.y; // remember initial y position to calculate peak

    let jumpFrame = () => {
        if (mario.y > initialY - peakHeight) {
            // Mario goes up
            mario.y -= jumpSpeed;
            requestAnimationFrame(jumpFrame);
        } else {
            // Mario goes down
            let fallFrame = () => {
                if (mario.y < initialY) {
                    mario.y += jumpSpeed;
                    requestAnimationFrame(fallFrame);
                } else {
                    // Reset jump status when Mario touches the ground
                    mario.y = initialY; // Ensure Mario returns to exact starting Y
                    mario.jumping = false;
                }
            };
            requestAnimationFrame(fallFrame);
        }
    };

    jumpFrame();
}

                function gameLoop() {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);

                    // Move obstacle
                    obstacle.x -= 2;
                    if (obstacle.x < 0) {
                        obstacle.x = 480;
                        score++;
                        document.getElementById('score').textContent = score;
                    }

                    // Collision detection
                    if (mario.x < obstacle.x + obstacle.width &&
                        mario.x + mario.width > obstacle.x &&
                        mario.y < obstacle.y + obstacle.height &&
                        mario.y + mario.height > obstacle.y) {
                        stopGame();
                    }

                    // Draw Mario
                    ctx.fillStyle = mario.color;
                    ctx.fillRect(mario.x, mario.y, mario.width, mario.height);

                    // Draw obstacle
                    ctx.fillStyle = obstacle.color;
                    ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
                }
            </script>
        </body>
        </html>
        )rawliteral");
    });

    server.begin();
    Serial.println("HTTP server started");
}

void loop() {
    server.handleClient();

    // Update LCD based on game status
    if (!gameActive) {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Mario's Epic Adventure");
        lcd.setCursor(0, 1);
        lcd.print("Game Over");
    } else {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Score: ");
        lcd.print(score);
        lcd.setCursor(0, 1);
        lcd.print("Game On");
    }
}

